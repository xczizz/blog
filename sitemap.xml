<search>
    
     <entry>
        <title>升级hugo版本</title>
        <url>https://idsze.cn/2020/01/upgrade-hugo-version/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>hugo</tag>
        </tags>
        <content type="html"> hugo 0.6 版本移除了Pygments作为代码高亮的选项，而我当前使用的 0.59 版本，想着升级一下，一直找不到 hugo 自带的升级命令，比如hugo upgrade之类的。
回来突然看到scoop，想起之前 windows 安装 hugo 就是用的 scoop ，尝试使用 scoop update hugo,升级成功。
</content>
    </entry>
    
     <entry>
        <title>git push的时候提示HEAD detached from origin/master</title>
        <url>https://idsze.cn/2020/01/get-tips-head-detached-from-master-when-git-push/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>git</tag>
        </tags>
        <content type="html"> 本地分支从主分支分离出来了，解决方式：
 拉出临时分支 git branch temp b57d3f2 切换到主分支 git checkout master 合并临时分支 git merge temp 推送主分支 git push origin master 删除临时分支 git branch -d temp  参考链接：https://blog.csdn.net/yongzili/article/details/93795441
</content>
    </entry>
    
     <entry>
        <title>github上的图片加载不出来</title>
        <url>https://idsze.cn/2020/01/pictures-can-not-be-loaded-on-github/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>hosts</tag>
        </tags>
        <content type="html"> 从这个站点查看下列三个站点的 IP 地址，然后添加到 hosts 里:
192.30.253.112 raw.githubusercontent.com 185.199.109.153 assets-cdn.github.com 199.232.5.194 github.global.ssl.fastly.net 但还是有图片加载不出来
</content>
    </entry>
    
     <entry>
        <title>vscode中配置markdown的代码片段不生效</title>
        <url>https://idsze.cn/2020/01/vscode-markdown-snippet-config/</url>
        <categories>
          <category>小技巧</category>
        </categories>
        <tags>
          <tag>vscode</tag><tag>markdown</tag>
        </tags>
        <content type="html"> vscode 中设置了markdown的一个more的代码段，但在 .md 文件中并没有生效，解决方式：在 setting.json 中添加如下信息：
&amp;#34;[markdown]&amp;#34;: {&amp;#34;editor.formatOnSave&amp;#34;: true,&amp;#34;editor.renderWhitespace&amp;#34;: &amp;#34;all&amp;#34;,&amp;#34;editor.quickSuggestions&amp;#34;: {&amp;#34;other&amp;#34;: true,&amp;#34;comments&amp;#34;: true,&amp;#34;strings&amp;#34;: true},&amp;#34;editor.acceptSuggestionOnEnter&amp;#34;: &amp;#34;on&amp;#34;}more 的代码段：
&amp;#34;read more&amp;#34;: {&amp;#34;prefix&amp;#34;: &amp;#34;more&amp;#34;,&amp;#34;body&amp;#34;: [&amp;#34;&amp;lt;!--more--&amp;gt;\n\n$0&amp;#34;],&amp;#34;description&amp;#34;: &amp;#34;read more&amp;#34;}参考链接： https://blog.csdn.net/serryuer/article/details/89393760
</content>
    </entry>
    
     <entry>
        <title>自定义文件夹排序</title>
        <url>https://idsze.cn/2020/01/customize-the-sorting-of-folders/</url>
        <categories>
          <category>小技巧</category>
        </categories>
        <tags>
          
        </tags>
        <content type="html"> D盘里有一堆文件夹，想给自定义排个序，却找不到合适的排序方法，但是系统自带的排序里有一个“备注”的选项，可以通过增加desktop.ini配置文件来给子文件夹增加“备注”属性，以便可以排序。
大体的目录结构如下：
├── D // D盘├── firstFolder // 需要排序的第一个文件夹│ ├── subFolder // 子文件夹或者其他│ ├── Desktop.ini // desktop 配置文件├── secondFolder // 需要排序的第二个文件夹│ ├── subFolder // 子文件夹或者其他│ ├── Desktop.ini // desktop 配置文件├── thirdFolder // 需要排序的第三个文件夹│ ├── subFolder // 子文件夹或者其他│ ├── Desktop.ini // desktop 配置文件├── otherFolder // 其他文件夹├── otherFolder // 其他文件夹 使用 markdown 编写如上的文件目录，使用的符号：├  │ ─，也不知道这是怎么搞出来的，复制的别人 = =
 desktop的内容 [.ShellClassInfo]InfoTip=3这里的 InfoTip 即为备注信息，直接写为数字可以排序。 在 powershell 命令行使用attrib &#43;H &#43;S Desktop.ini可以将该文件设置为系统属性和隐藏属性，下次使用需要在文件夹选项中将这个显示出来。使用之后，desktop 的内容自动改变:
[.ShellClassInfo]InfoTip=3[ViewState]Mode=Vid=FolderType=Generic完事之后需要刷新文件夹才可立即生效，怎么刷新文件夹，暂时没研究清楚，有一个曲线救国的方式：随便更改一下文件夹的图标（可以更改为一模一样的），就能立即生效。
attrib 可使用 attrib /? 来查看用法。
更多配置信息：https://hwiegman.home.xs4all.nl/desktopini.html
</content>
    </entry>
    
     <entry>
        <title>更改nodejs的全局包的默认安装位置</title>
        <url>https://idsze.cn/2020/01/change-default-installation-location-of-nodejs-global-modules/</url>
        <categories>
          <category>小技巧</category>
        </categories>
        <tags>
          <tag>nodejs</tag>
        </tags>
        <content type="html"> 默认情况下，位置应该在C:/users/xx/AppData/Roaming/node下，现在更改到D盘。
查看位置：npm config ls
更改位置：npm config set prefix &amp;quot;D:\node_global_modules&amp;quot;
顺便看到npm缓存位置也在C盘，那就一块改到D盘：npm config set cache &amp;quot;D:\nodejs\node_cache
但是这么改完还是不能用的，需要在添加环境变量，在用户的Path里增加一个D:\nodejs\node_global_modules，然后在系统变量里面新建一个叫NODE_PATH的变量，值为D:\node\node_global\node_modules，这个值是全局模块的文件夹路径，以后安装的全局模块就在这里。
</content>
    </entry>
    
     <entry>
        <title>Git Subtree Push 报错 Assertion Failed</title>
        <url>https://idsze.cn/2020/01/assertion-failed-when-use-git-subtree-push/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>git</tag>
        </tags>
        <content type="html"> 今天使用git subtree push xxx的时候竟然爆了一个错误：Assertion failed xxx  和 No new revisions were found ，查了半天愣是没找到任何解决方式。
代码也没问题，使用方式也正确，之前在 win7 上也没问题，于是换成win7上相同的环境再试一下，下载了一个gitBush ，woc竟然莫名其妙的push成功，真的是终端问题？？ powershell和gitbush两个终端上的git push结构不一样？？
</content>
    </entry>
    
     <entry>
        <title>codingPages中申请ssl报错</title>
        <url>https://idsze.cn/2019/12/coding-pages-ssl-error/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>ssl</tag>
        </tags>
        <content type="html"> 错误码：urn:acme:error:unauthorized: Invalid response from http://idsze.cn/.well-known/acme-challenge/a_Dj4u6BkPX20lK8mGqlAHWHgoxT0YkqfVAzsrGS2TQ [185.199.108.153]: &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html&amp;gt;\n &amp;lt;head&amp;gt;\n &amp;lt;meta http-equiv=\&amp;quot;Content-type\&amp;quot; content=\&amp;quot;text/html; charset=utf-8\&amp;quot;&amp;gt;\n &amp;lt;meta http-equiv=\&amp;quot;Co&amp;quot;
查了下ip为荷兰： 估计可能是 githubPages 的解析地址。先暂停 github 的解析，然后重新申请。
结果又报错：urn:acme:error:dns: No valid IP addresses found for idsze.cn
在官方的常见错误列表中查到是 dns 解析问题，之前把 coding 的解析到了境内，官方要求海外的也要解析。更换之后申请成功。不过证书的有效期只有三个月，有点少。
</content>
    </entry>
    
     <entry>
        <title>windows下的php环境安装</title>
        <url>https://idsze.cn/2019/12/php-environment-setup-under-windows/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>php</tag><tag>apache</tag><tag>mysql</tag>
        </tags>
        <content type="html"> Apache 直接在官网下载。解压之后有个readme_first.html就有使用说明。先更改ServerRoot为绝对路径（注意路径写正斜杠），就可以跑起来。
这个是 apache conf 的内容 # NOTE: Where filenames are specified, you must use forward slashes # instead of backslashes (e.g., &amp;#34;c:/apache&amp;#34; instead of &amp;#34;c:\apache&amp;#34;). 简单记几个命令：
安装服务（需要用管理员权限）: httpd -k install 卸载服务 httpd -k uninstall 启动服务 httpd -k start 停止服务 httpd -k stop 重启服务 httpd -k restart 查看版本 httpd -V 查看支持的命令 httpd -h 可以在 windwos 服务中设为开机自启。
安装是时候似乎出现一个错误Errors reported here must be corrected before the service can be started.，这不是错误，而是提示，如果此处有错误必须先解决 😂 配置 Apache 支持 PHP  配置 php 模块  # php7 support LoadModule php7_module &amp;#34;C:/php/php740/php7apache2_4.dll&amp;#34; AddType application/x-httpd-php .php .html .htm # configure the path to php.ini PHPIniDir &amp;#34;C:/php/php740&amp;#34; 配置 web 根目录，可以重新设置一个 webRoot  # customize web root Define WEBROOT &amp;#34;D:/PhpWorkspace/www&amp;#34; DocumentRoot &amp;#34;${WEBROOT}&amp;#34; &amp;lt;Directory &amp;#34;${WEBROOT}&amp;#34;&amp;gt; Mysql 下载链接：https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18-winx64.zip 这个版本没有配置文件，需手动增加一个：my.ini，先上最简单的配置：
[client] #password = port = 3306 #socket = /tmp/mysql.sock default-character-set = utf8mb4 [mysqld] #bind-address = 0.0.0.0 port = 3306 #socket = /tmp/mysql.sock # 允许最大连接数 max_connections = 200 # 允许连接失败的次数。 max_connect_errors=10 # 服务端使用的字符集默认为utf8mb4 character-set-server=utf8mb4 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB #开启查询缓存 explicit_defaults_for_timestamp = true #设置加密方式为原生加密方式吗，解决无法登陆 phpmyadmin 的问题 default_authentication_plugin=mysql_native_password 初始化之后会给一个root用户和默认密码：mysqld --initialize --console
安装服务：.\bin\mysqld --install
启动服务：net start mysql
第一次进入之后会让更改密码：alter user root@localhost identified by &amp;quot;password&amp;quot; PHP 下载地址：https://windows.php.net/downloads/releases/php-7.4.0-Win32-vc15-x64.zip ，php主要就是一堆的配置。 复制php.ini-development为php.ini，放几个常用配置：
short_open_tag = On post_max_size = 20M upload_max_filesize = 50M On windows: extension_dir = &amp;#34;ext&amp;#34; 按需开启相对应扩展 phpmyadmin 安装 官网下载 phpMyadmin，解压到上边配好的 webroot 目录下，打开，看到熟悉的页面。尝试登陆一下，发现报错mysqli::real_connect(): The server requested authentication method unknown to the client [caching_sha2_password] 去mysql官网看一下解释 大致意思就是 mysql8.0 之后有了更安全的加密方式且被设置为默认的加密方式，而当前登录暂时不支持该方式，解决方法是设置加密方式为之前的default_authentication_plugin=mysql_native_password，然后命令行进入 mysql 设置 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;，再刷新一下 FLUSH PRIVILEGES;，除此之外似乎也没找到更好的解决方式，只能等待 phpmyadmin 支持新的加密方式了。 &amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;password&amp;#39;; &amp;gt; FLUSH PRIVILEGES; 修改完成之后顺利进入 phpmyadmin，页面下边出现一个新的错误 配置文件现在需要一个短语密码。 解决方法：
1、在 phpMyAdmin/libraries/config.default.php 中把 $cfg[&#39;blowfish_secret&#39;]给一个值
2、在 phpMyAdmin/config.sample.inc.php 中的 $cfg[&#39;blowfish_secret&#39;] 也给一个值
 官方给的注释：
This is needed for cookie based authentication to encrypt password in cookie. Needs to be 32 chars long.
$cfg[&#39;blowfish_secret&#39;] = &#39;&#39;; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */
 字面意思是用来 cookie 加密，防止混淆。
</content>
    </entry>
    
     <entry>
        <title>powerShell中执行多个命令</title>
        <url>https://idsze.cn/2019/11/execute-multiple-commands-in-powershell/</url>
        <categories>
          <category>小技巧</category>
        </categories>
        <tags>
          
        </tags>
        <content type="html"> 使用&amp;amp;&amp;amp;的时候报错，查了下使用;可以输入多个命令。
也有说使用-and 或者 -or的还没做测试，测试没有成功
emoji 链接：https://www.webfx.com/tools/emoji-cheat-sheet/
</content>
    </entry>
    
     <entry>
        <title>动态添加的html无法使用bootstrap的tooltip</title>
        <url>https://idsze.cn/2018/09/cannot-trigger-bootstraps-tooltip-when-dynamically-added-html/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>html</tag><tag>bootstrap</tag>
        </tags>
        <content type="html"> 经常有一些数据是通过 ajax 获取的，然后渲染到页面上，通过 append 或者其他方式把 html 加载到 DOM 页面，但这个时候无法使用 js 中的一些事件，可以通过$(&#39;body&#39;).on(&#39;&#39;click&#39;&#39;,xxxx,function(){})来解决部分（比如click）事件，但碰到 tooltip 怎么解决
bootstrap 中的 tooltip 调用方式为：$(&#39;[data-toggle=&amp;quot;tooltip&amp;quot;]&#39;).tooltip()
解决方式：
$(&amp;#34;body&amp;#34;).tooltip({selector: &amp;#39;[data-toggle=&amp;#34;tooltip&amp;#34;]&amp;#39;});原文：https://stackoverflow.com/questions/9958825/how-do-i-bind-twitter-bootstrap-tooltips-to-dynamically-created-elements
</content>
    </entry>
    
     <entry>
        <title>本地环境伪造ssl证书</title>
        <url>https://idsze.cn/2018/06/forged-ssl-certificate-in-local-environment/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>ssl</tag>
        </tags>
        <content type="html">  看到报错：curl: (60) SSL certificate problem: unable to get local issuer certificate 下载证书 https://curl.haxx.se/ca/cacert.pem ，一般放在D:/wamp64/bin/php/php7.1.9/extras/ssl/cacert.pem 配置php.ini  curl.cainfo = &amp;#34;D:/wamp64/bin/php/php7.1.9/extras/ssl/cacert.pem&amp;#34;`openssl.capath=&amp;#34;D:/wamp64/bin/php/php7.1.9/extras/ssl/cacert.pem&amp;#34;重启服务 </content>
    </entry>
    
     <entry>
        <title>Redis安装相关</title>
        <url>https://idsze.cn/2018/05/install-redis-in-linux-and-windows/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>redis</tag>
        </tags>
        <content type="html"> linux进入redis服务 直接redis-cli 查看redis进程 service redis status
windows安装redis服务 redis-server --service-install redis.windows-service.conf --loglevel verbose
windows安装redis扩展 查看php的版本，架构以及线程是否为安全： 然后在扩展包里选择和是的redis版本，解压后将php_reids.dll放入php扩展文件夹里
</content>
    </entry>
    
     <entry>
        <title>Linux知识小记</title>
        <url>https://idsze.cn/2018/05/linux-study-notes/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>linux</tag>
        </tags>
        <content type="html"> 一般来说著名的linux系统基本上分两大类：
 RedHat系列：Redhat、Centos、Fedora等 Debian系列：Debian、Ubuntu等   RedHat 系列   常见的安装包格式 rpm 包,安装 rpm 包的命令是rpm -参数 包管理工具 yum rpm软件包是为了简化安装的复杂度，而yum仓库是为了解决软件包之间的依赖关系。  Debian系列   常见的安装包格式 deb 包,安装 de b包的命令是dpkg -参数 包管理工具 apt-get   系统装完之后，可以一一键安装开发编译的工具包:
Debian 上可以使用 apt-get install build-essential
CentOS 上使用 yum groupinstall &amp;quot;Development Tools&amp;quot;
 查看文本的方式 cat： 用于将一个文件的内容连续输出在屏幕上
其命令格式： cat [-option] 文件名
常用参数：
-n: 将行号一起显示在屏幕上
-b：将行号一起显示在屏幕上,但空行不算
more：同样用于显示文件内容，会在显示完一屏内容后停下，可以下翻。
其命令格式为： more 文件名
回车键可以单行下翻， Ctrl&#43;f可以整页下翻，若需退出按q键。
less: 和 more 一样，唯一区别就是可以使用 pagedown 和 pageup 进行上翻和下翻，方便一些。 其命令格式为： less 文件名
head: 默认情况下，用于显示文件内容的前10行 其命令格式为： head 文件名
常用参数： -n :指定显示的行数 
tail: 与 head 相反，默认情况下显示文件内容的后10行 其命令格式为： tail 文件名
常用参数：  -n :指定显示的行数
跳到指定行 200gg 跳到第二百行行首，200G是行尾
显示行号  crtl&#43;g可以显示当前光标从所在位置（第几行第几列以及所在位置的百分比） :set nu可以设置全部显示行号 ，:nu 跟crtl&#43;g 一样的效果。  添加到组(附加组) usermod -g groupname username
usermod -G groupname username
eg: usermod -g root doze 将doze加入到root 大写G 是将用户添加到附加组，小写g 是更改用户组
查看用户所属组 groups username 或者 id username 或者 more | /etc/group
删除用户 userdel wang注：删除用户wang，但不删除其家目录(在/var中)及文件； userdel -r wang注：删除用户wang，其家目录及文件一并删除；
查看所有用户 cat /etc/passwd
cat /etc/passwd|grep 用户名 结果显示：strawberry: x:502:0::/home/strawberry:/bin/bash
结果描述：用户名:密码:ID:组ID:备注:根目录:shell所在目录
修改密码 普通用户：passwd，需要旧密码 root用户：passwd username
查看在线用户 who
踢用户下线 root用户才可以使用：  pkill -kill -t pts/0
修改文件或者目录权限 d rwx rwx r-x 目录 主用户 组 其他
- 常规文件 d 目录 b 块设备特殊（磁盘） c 字符特殊设备（终端） s 信号灯  使用文字 chmod ［who］ ［&#43; | - | =］ ［mode］ 文件名 操作对象who可是下述字母中的任一个或者它们的组合：  u 表示“用户（user）”，即文件或目录的所有者。 g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。 o 表示“其他（others）用户”。 a 表示“所有（all）用户”。它是系统默认值。 1.1. 操作符号可以是：
&#43; 添加某个权限。 - 取消某个权限。 = 赋予给定权限并取消其他所有权限（如果有的话） 1.2. 设置mode所表示的权限可用下述字母的任意组合：
r 可读 w 可写 x 可执行 X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性 s 在文件执行时把进程的属主或组ID置为该文件的文件属主 t 保存程序的文本到交换设备上 u 与文件属主拥有一样的权限 g 与和文件属主同组的用户拥有一样的权限 o 与其他用户拥有一样的权限。 例：chmod g&#43;r，o&#43;r example 使同组和其他用户对文件example 有读权限。 2. 使用数字 chmod ［mode］ 文件名 0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限 例： chmod 644 mm.txt
 使用ssh密钥登录 安全设置：在配置文件中，禁止root登录，禁止密码登录，
PasswordAuthentication no //禁止密码 PermitRootLogin no //禁止root  生成密钥：doze用户（su doze）下，进入根目录（/home/doze/） ssh-keygen -t rsa 中间有提示可以输入密钥的密码 将密钥添加到授权文件中（在.ssh目录下操作） cat id_dsa.pub &amp;gt; authorized_keys 此时.ssh下的文件有id_dsa，id_dsa.pub，authorized_keys 设置权限  chmod 600 authorized_keys  chmod 700 .ssh 4.允许用户可以使用ssh密钥登录 sudo vim /etc/ssh/sshd_config 将用户添加到AllowUsers 后边 然后重启sudo service sshd restart。如果少了这一步，报错：该密钥未在远程主机注册 将id_dsa传到本地windows上，使用putty生成ppk文件(可以省略，如果使用Xshell登录的话) 然后就可以正常使用密钥登录了。  防火墙的一些含义 :INPUT ACCEPT [0:0] # 该规则表示INPUT表默认策略是ACCEPT :FORWARD ACCEPT [0:0] # 该规则表示FORWARD表默认策略是ACCEPT :OUTPUT ACCEPT [0:0] # 该规则表示OUTPUT表默认策略是ACCEPT -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT # 意思是允许进入的数据包只能是刚刚我发出去的数据包的回应，ESTABLISHED：已建立的链接状态。RELATED：该数据包与本机发出的数据包有关。 -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited # 这两条的意思是在INPUT表和FORWARD表中拒绝所有其他不符合上述任何一条规则的数据包。并且发送一条host prohibited的消息给被拒绝的主机。 查看磁盘容量，查看文件大小 df命令是Linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式： df -hl 显示格式为：　文件系统 容量 已用 可用 已用% 挂载点　
查看文件大小：使用du -a -h -a参数显示子目录和文件大小 -h 带单位显示
find命令参数 http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html
查看文件修改时间 查看文件时间戳命令：stat awk.txt
File: `awk.txt&amp;#39; Size: 20 Blocks: 8 IO Block: 4096 regular file Device: 801h/2049d Inode: 380730 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2008-04-26 01:50:44.000000000 &#43;0800 Modify: 2008-04-26 01:48:18.000000000 &#43;0800 Change: 2008-04-26 01:48:18.000000000 &#43;0800 说明：Access访问时间。Modify修改时间。Change状态改变时间。可以stat *查看这个目录所有文件的状态
压缩以及解压 tar 使用
-c: 压缩 -x：解压 -t：查看内容 -r：向压缩归档文件末尾追加文件 -u：更新原压缩包中的文件 -z：有gzip属性的 -j：有bz2属性的 -Z：有compress属性的 -v：显示所有过程 -O：将文件解开到标准输出
-f 的参数是必须的，且必须是最后一个，后面跟目标文件名
gzip 使用
-c：将输出写到标准输出上，并保留原有文件。 -d ：将压缩文件解压。 -l ：对每个压缩文件，显示下列字段： 压缩文件的大小 未压缩文件的大小 压缩比 未压缩文件的名字 -r ：递归式地查找指定目录并压缩其中的所有文件或者是解压缩。 -t ：测试，检查压缩文件是否完整。 -v： 对每一个压缩和解压的文件，显示文件名和压缩比。 -num： 用指定的数字num调整压缩的速度， -1或&amp;ndash;fast：表示最快压缩方法（低压缩比）， -9或&amp;ndash;bes：t表示最慢压缩方法（高压缩比）。系统缺省值为6。
写几个例子：
tar压缩： tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2 tar –cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z tar解压： tar –xvf file.tar //解压 tar包 tar -xzvf file.tar.gz //解压tar.gz tar -xjvf file.tar.bz2 //解压 tar.bz2 tar –xZvf file.tar.Z //解压tar.Z gzip压缩就比较简单： gzip‍ -c src &amp;gt; dst.gz //src压缩之后还保留源文件 gzip解压： gzip -d aaa.gz gunzip aaa.gz 查看linux 启动的服务 chkconfig --list
查看linux版本(适用于redhat和centos系列)  cat /etc/redhat-release 返回类似CentOS release 6.8 (Final)
后台运行神器screen命令的使用 直接使用screen相当于打开一个新的窗口，在窗口里可以执行任意的命令。 也可以在screen 命令后跟上需要执行的命令，但是这样如果命令包含了 &amp;gt; 这种写入上操作，是不会生效的。
 退出|screen : ctrl &#43; 小写a &#43; 小写d，Screen会给出detached提示 查看 screen 有哪些任务 screen -ls，可以看出任务的pid 连接 screen 的具体某一个任务： screen -r pid,这儿的pid指的是process id 结束某一个任务：kill -9 pid，pid同上，这样会把该任务设为 dead 状态 清空所有不工作的任务： screen -wipe,会清除掉所有的 dead 状态的任务  文件上传下载 rz 弹出个框框，进行上传 sz filename下载
</content>
    </entry>
    
     <entry>
        <title>Php写一个简单的抽奖功能</title>
        <url>https://idsze.cn/2018/03/a-simple-lottey-use-php/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>php</tag><tag>算法</tag>
        </tags>
        <content type="html"> 可重复的抽奖 &amp;lt;?php$prize_arr = [[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;500金币&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 5, &amp;#39;weight&amp;#39; =&amp;gt; 1],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;免禁buff48小时体验&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 1, &amp;#39;weight&amp;#39; =&amp;gt; 2],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;防偷buff48小时体验&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 2, &amp;#39;weight&amp;#39; =&amp;gt; 2],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;免禁buff24小时体验&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 3, &amp;#39;weight&amp;#39; =&amp;gt; 3],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;防偷buff24小时体验&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 4, &amp;#39;weight&amp;#39; =&amp;gt; 3],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;100金币&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 6, &amp;#39;weight&amp;#39; =&amp;gt; 3],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;50金币&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 7, &amp;#39;weight&amp;#39; =&amp;gt; 6],[&amp;#39;title&amp;#39; =&amp;gt; &amp;#39;5金币&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 8, &amp;#39;weight&amp;#39; =&amp;gt; 10],];function getRand($prize_arr) {$result = count($prize_arr)-1; // 默认数组最后用一个	$pro_sum = array_sum(array_map(&amp;#39;array_pop&amp;#39;, $prize_arr)); // 拿到总数	// $pro_sum = array_sum(array_column($prize_arr, &amp;#39;weight&amp;#39;)); // 两个方法都okforeach ($prize_arr as $key =&amp;gt; $value) {$rand_num = mt_rand(1, $pro_sum);if ($rand_num &amp;lt;= $value[&amp;#39;weight&amp;#39;]) {$result = $key;break;} else {$pro_sum -= $value[&amp;#39;weight&amp;#39;]; // 说明没有抽到，减去权重,继续来	}}return $result;}30次测试一下
&amp;lt;?php$test = [0,0,0,0,0,0,0,0];for ($i=0; $i &amp;lt; 30; $i&#43;&#43;) {$result = getRand($prize_arr);$test[$result] &#43;=1;echo $prize_arr[$result][&amp;#39;title&amp;#39;].PHP_EOL;}print_r($test);两次测试结果： 不可重复，抽完就少一个 代码上就加一个引用，然后抽一次权重个数减少一个
&amp;lt;?phpfunction getRand(&amp;amp;$prize_arr) { // 地址引用	$result = count($prize_arr)-1; // 默认数组最后用一个	$pro_sum = array_sum(array_map(&amp;#39;array_pop&amp;#39;, $prize_arr)); // 拿到总数	// $pro_sum = array_sum(array_column($prize_arr, &amp;#39;weight&amp;#39;)); // 两个方法都okforeach ($prize_arr as $key =&amp;gt; $value) {$rand_num = mt_rand(1, $pro_sum);if ($rand_num &amp;lt;= $value[&amp;#39;weight&amp;#39;]) {$result = $key;$prize_arr[$key][&amp;#39;weight&amp;#39;] -= 1; // 权重减一	$pro_sum -= 1; // 总数减一 ，或者把$pro_sum 那一句写进foreach里边	break;} else {$pro_sum -= $value[&amp;#39;weight&amp;#39;]; // 说明没有抽到，减去权重,继续来	}}return $result;}两次测试结果： </content>
    </entry>
    
     <entry>
        <title>Mysql筛选重复数据</title>
        <url>https://idsze.cn/2018/03/filter-duplicate-data-in-mysql/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>mysql</tag>
        </tags>
        <content type="html"> 有个需求：选出表里重复的数据，只保留一个
having是在分组之后，对组内数据进行筛选，where 就不多说了，在分组前添加条件的
SELECT id,name,count(name) FROM idiom group by name HAVING count(name)&amp;gt;=2 可以看出大概519个数据都是有重复的
SELECT id,name,min(id),max(id),count(name) FROM idiom group by name HAVING count(name)&amp;gt;=3 可以看出默认选出的id就是最小的
重复两条的数据有点多，直接上3个跟上头有个对比 SELECT id,name FROM idiom WHERE name IN (SELECT name FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=3) AND id NOT IN (SELECT id FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=3)
一切正常，执行删除：DELETE FROM idiom WHERE name IN (SELECT name FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=2) AND id NOT IN (SELECT id FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=2)
但是，好像报错啦：
没办法，这个报错查了好多好像是要使用临时表于是改成这个样子
DELETE FROM idiom WHERE id IN (SELECT x.id FROM(SELECT id,name FROM idiom WHERE name IN (SELECT name FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=2)AND id NOT IN (SELECT id FROM idiom GROUP BY name HAVING COUNT(name)&amp;gt;=2)) x)</content>
    </entry>
    
     <entry>
        <title>Mysql开启远程连接</title>
        <url>https://idsze.cn/2018/03/mysql-open-remote-connection/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>mysql</tag>
        </tags>
        <content type="html">   查看端口是否开放 netstat -an | grep 3306 发现3306只对本地有效
  更改mysql配置文件中的绑定地址 vim /etc/mysql/mysql.conf.d/mysqld.cnf 注销 bind-address = 127.0.0.1这一行
  重启 /etc/init.d/mysql restart
  重新查看端口开放 </content>
    </entry>
    
     <entry>
        <title>Mysql添加用户来操作指定数据库</title>
        <url>https://idsze.cn/2018/03/mysql-add-user-to-operate-the-specified-database/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>mysql</tag>
        </tags>
        <content type="html"> 创建授权  先创用户再授权
新建用户：create user &#39;username&#39;@&#39;host&#39; identified by &#39;password&#39;;
username 为用户名
password 为密码
host 如果为localhost则只能本地登录，使用%为不限制
授权： grant privileges on databasename.tablename to &#39;username&#39;@&#39;host&#39;;
privileges 为用户的操作权限，可以是 insert,update等等，官方权限列表  创建的时候同时授权
grant privileges on dabasename.* to &#39;username&#39;@&#39;host&#39; identified by &#39;password&#39;;
实例: grant select,insert,update,delete on ipdata.* to &#39;ipdata&#39;@&#39;%&#39; identified by &#39;12345465&#39;
ipdata 这个用户可以对 ipdata 数据进行的操作为增删改查，ipdata 用户的密码为12345465，执行完之后必须刷新权限：flush privileges;  更改用户密码 set password for &#39;username&#39;@&#39;host&#39;=password(&#39;password&#39;);
撤销权限 revoke privilege on databasename.tablename from &#39;username&#39;@&#39;host&#39;
删除用户 drop user &#39;username&#39;@&#39;host&#39;
</content>
    </entry>
    
     <entry>
        <title>Yii2使用adminLTE的时候添加左侧菜单树上badge</title>
        <url>https://idsze.cn/2017/11/adminlet-left-menu-tree-add-badge/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>yii2</tag>
        </tags>
        <content type="html"> 更改：vendor\dmstr\yii2-adminlte-asset\widgets\Menu.php这个文件大概70行左右，有一个renderItem($item)的函数
更改之前是这样的：
&amp;lt;?phpprotected function renderItem($item){if (isset($item[&amp;#39;items&amp;#39;])) {$labelTemplate = &amp;#39;&amp;lt;a href=&amp;#34;{url}&amp;#34;&amp;gt;{icon} {label} &amp;lt;span class=&amp;#34;pull-right-container&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-angle-left pull-right&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#39;;$linkTemplate = &amp;#39;&amp;lt;a href=&amp;#34;{url}&amp;#34;&amp;gt;{icon} {label} &amp;lt;span class=&amp;#34;pull-right-container&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-angle-left pull-right&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#39;;} else {$labelTemplate = $this-&amp;gt;labelTemplate;$linkTemplate = $this-&amp;gt;linkTemplate;}// ... 之后的不变}更改为：
&amp;lt;?phpprotected function renderItem($item){if (isset($item[&amp;#39;items&amp;#39;])) {$labelTemplate = &amp;#39;&amp;lt;a href=&amp;#34;{url}&amp;#34;&amp;gt;{icon} {label} &amp;lt;span class=&amp;#34;pull-right-container&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-angle-left pull-right&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#39;;$linkTemplate = &amp;#39;&amp;lt;a href=&amp;#34;{url}&amp;#34;&amp;gt;{icon} {label} &amp;lt;span class=&amp;#34;pull-right-container&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-angle-left pull-right&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#39;;} elseif (isset($item[&amp;#39;badges&amp;#39;]) &amp;amp;&amp;amp; !empty($item[&amp;#39;badges&amp;#39;])) {$right_container = &amp;#39;&amp;#39;;foreach ($item[&amp;#39;badges&amp;#39;] as $badge) {if (!isset($badge[&amp;#39;text&amp;#39;]) || empty($badge[&amp;#39;text&amp;#39;])) continue;if (!isset($badge[&amp;#39;color&amp;#39;])) $badge[&amp;#39;color&amp;#39;] = &amp;#39;primary&amp;#39;;$right_container .= &amp;#39;&amp;lt;small class=&amp;#34;label pull-right bg-&amp;#39;. $badge[&amp;#39;color&amp;#39;] .&amp;#39;&amp;#34;&amp;gt;&amp;#39;. $badge[&amp;#39;text&amp;#39;] .&amp;#39;&amp;lt;/small&amp;gt;&amp;#39;;}$labelTemplate = $this-&amp;gt;labelTemplate;$linkTemplate = &amp;#39;&amp;lt;a href=&amp;#34;{url}&amp;#34;&amp;gt;{icon} {label} &amp;lt;span class=&amp;#34;pull-right-container&amp;#34;&amp;gt;&amp;#39;. $right_container .&amp;#39;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#39;;} else {$labelTemplate = $this-&amp;gt;labelTemplate;$linkTemplate = $this-&amp;gt;linkTemplate;}使用方法： 总得来说，就是多写一个判断，来添加badge的颜色和文字
</content>
    </entry>
    
     <entry>
        <title>Onclick属性值函数的参数问题</title>
        <url>https://idsze.cn/2017/09/onclick-attribute-function-params/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>html</tag><tag>js</tag>
        </tags>
        <content type="html"> 踩坑之前的代码：
// HTML&amp;lt;a href=&amp;#34;javascript:;&amp;#34; onclick=&amp;#34;follow(123)&amp;#34; class=&amp;#34;btn btn-warning btn-sm btn-flat&amp;#34;&amp;gt;OK&amp;lt;/a&amp;gt;// JS&amp;lt;script&amp;gt;function follow(id){console.log($(this));$(this).addClass(&amp;#39;success&amp;#39;); // 这个success是添加不上去的}&amp;lt;/script&amp;gt;填坑：如果onclick属性没有传入this对象，则在函数定义中不能使用$(this)
// HTML&amp;lt;a href=&amp;#34;javascript:;&amp;#34; onclick=&amp;#34;follow(this)&amp;#34; class=&amp;#34;btn btn-warning btn-sm btn-flat&amp;#34; data-id=&amp;#34;123&amp;#34;&amp;gt;OK&amp;lt;/a&amp;gt;// JS&amp;lt;script&amp;gt;// 这个地方的which不能写成this，会报错function follow(which){console.log($(which));$(which).addClass(&amp;#39;success&amp;#39;); // ok $(which).data(&amp;#34;id&amp;#34;); //123}&amp;lt;/script&amp;gt;注意的点：js函数的参数名称不能是this。
</content>
    </entry>
    
     <entry>
        <title>Xunsearch安装</title>
        <url>https://idsze.cn/2017/09/install-xunsearch/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>xunsearch</tag>
        </tags>
        <content type="html">   安装库 yum -y install make gcc gcc-c&#43;&#43; libtool autoconf automake
  安装软件（先下载软件包，解压到单独目录）
  cd /softwarewget http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2tar -xjf xunsearch-full-latest.tar.bz2cd xunsearch-full-1.3.0/sh setup.sh//选择安装路径在/software/xunsearchcd xunsearchbin/xs-ctl.sh start添加到开机启动命令 vi /etc/rc.local 在文件最后加一句cd /software/xunsearch ; bin/xs-ctl.sh restart  构建索引  util/Indexer.php --rebuild --source=mysql://你的数据库用户名:你的数据库密码@你的数据库IP/你的数据库名 --sql=&amp;quot;你要执行的SQL语句&amp;quot; --filter=debug --project=你的项目名 &amp;gt;日志文件名 本次使用的search.ini配置文件放在了项目的配置文件下 使用（在yii根目录下）： php vendor/hightman/xunsearch/util/Indexer.php --rebuild --source=mysql://root:000@localhost/yii --sql=&amp;quot;SELECT id,title,content,created_at status FROM yii_blog WHERE user_id=2&amp;quot; --project=blogapp/config/blogsearch.ini 尝试搜索一下 php vendor/hightman/xunsearch/util/Quest.php -p blogapp/config/blogsearch.ini &#39;比较&#39; 会出现搜索结果 在windows上进行测试配置（下载好vendor并配置好配置文件）：
首先要修改linux上8383和8384对外可访问的端口（默认这两个端口只对可访问） linux上配置如下(xunsearch目录下)：
①先关闭已经占用的这两个端口(这真是一个头疼的问题，一开始没有关闭，就直接用命令更改，一直改不出来，后来无意间发现要先关闭再使用-b来启动)：bin/xs-ctl.sh stop
②使用-b启动服务：bin/xs-ctl.sh -b inet start 
③配置防火墙可以对外访问：  vi /etc/sysconfig/iptables添加如下内容-A INPUT -p tcp -m state --state NEW -m tcp --dport 8383 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8384 -j ACCEPT之后保存重启service iptables save service iptables restart④ netstat -antp出现神奇的一幕： 撤回只允许本访问：  bin/xs-ctl.sh -b inet stop // 以-b 启动的，也要以 -b 结束bin/xs-ctl.sh start删除索引（字段结构发生变化） yii根目录下进行：  vendor/hightman/xunsearch/util/Indexer.php --clean bogapp/config/blogsearch.ini &amp;ndash;clean 后面跟上配置文件的路径 </content>
    </entry>
    
     <entry>
        <title>Yii2笔记</title>
        <url>https://idsze.cn/2017/08/note-for-yii2/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>yii2</tag>
        </tags>
        <content type="html">  Yii 维护页面  网站维护，入口文件index.php 直接echo 在应用的配置文件（man.php）中加入以下代码：  &amp;lt;?php&amp;#39;catchAll&amp;#39; =&amp;gt; [ //打开之后所有页面进入维护模式 &amp;#39;site/maintenance&amp;#39;, //维护页面控制器 &amp;#39;message&amp;#39; =&amp;gt; &amp;#39;网站维护&amp;#39;, //参数（可有可无） ],  registerJsFile() &amp;lt;?php$this-&amp;gt;registerJsFile(&amp;#39;@web/js/about.js&amp;#39;,[&amp;#39;depends&amp;#39;=&amp;gt;&amp;#39;yii\web\YiiAsset&amp;#39;,&amp;#39;position&amp;#39;=&amp;gt;\yii\web\View::POS_END]); 注册用户，当输入用户名的时候，直接判断是否存在，而不是提交再判断 那么这种做法是，开启ActiveForm的enableAjaxValidation
&amp;lt;?php &amp;lt;?php $form = ActiveForm::begin([&amp;#39;id&amp;#39; =&amp;gt; &amp;#39;form-signup&amp;#39;,&amp;#39;enableAjaxValidation&amp;#39; =&amp;gt; true]);?&amp;gt;然后在controller里添加一个ajax验证字段
&amp;lt;?php$model = new SignupForm();if ($model-&amp;gt;load(Yii::$app-&amp;gt;request-&amp;gt;post())) {if (Yii::$app-&amp;gt;request-&amp;gt;isAjax) {Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_JSON;return ActiveForm::validate($model);} //ajax提交过来的会直接进行验证 if ($user = $model-&amp;gt;signup()) {if (Yii::$app-&amp;gt;getUser()-&amp;gt;login($user)) {return $this-&amp;gt;goHome();}}}return $this-&amp;gt;render(&amp;#39;signup&amp;#39;, [&amp;#39;model&amp;#39; =&amp;gt; $model,]); 权限流程  菜单管理添加菜单，在数据选项中添加{&amp;quot;icon&amp;quot;:&amp;quot;fa fa-rss&amp;quot;}可以更换图标，要用双引号 路由列表 &amp;ndash; 添加路由 权限管理新增权限，把新添加的菜单权限放进去,并分配路由 角色管理 &amp;ndash; 把新增的菜单分配给角色  添加新的应用  根目录下Copy一份backend 应用改名为blogapp 打开environments/index.php 增加其初始化工作。（开发环境和生产环境里面配置如下  &amp;lt;?phpreturn [ &amp;#39;Development&amp;#39; =&amp;gt; [ &amp;#39;path&amp;#39; =&amp;gt; &amp;#39;dev&amp;#39;, &amp;#39;setWritable&amp;#39; =&amp;gt; [ &amp;#39;backend/runtime&amp;#39;, &amp;#39;backend/web/assets&amp;#39;, &amp;#39;frontend/runtime&amp;#39;, &amp;#39;frontend/web/assets&amp;#39;, &amp;#39;api/runtime&amp;#39;, &amp;#39;api/web/assets&amp;#39;, ], &amp;#39;setExecutable&amp;#39; =&amp;gt; [ &amp;#39;yii&amp;#39;, ], &amp;#39;setCookieValidationKey&amp;#39; =&amp;gt; [ &amp;#39;backend/config/main-local.php&amp;#39;, &amp;#39;frontend/config/main-local.php&amp;#39;, &amp;#39;api/config/main-local.php&amp;#39;, ], ], &amp;#39;Production&amp;#39; =&amp;gt; [ &amp;#39;path&amp;#39; =&amp;gt; &amp;#39;prod&amp;#39;, &amp;#39;setWritable&amp;#39; =&amp;gt; [ &amp;#39;backend/runtime&amp;#39;, &amp;#39;backend/web/assets&amp;#39;, &amp;#39;frontend/runtime&amp;#39;, &amp;#39;frontend/web/assets&amp;#39;, &amp;#39;api/runtime&amp;#39;, &amp;#39;api/web/assets&amp;#39;, ], &amp;#39;setExecutable&amp;#39; =&amp;gt; [ &amp;#39;yii&amp;#39;, ], &amp;#39;setCookieValidationKey&amp;#39; =&amp;gt; [ &amp;#39;backend/config/main-local.php&amp;#39;, &amp;#39;frontend/config/main-local.php&amp;#39;, &amp;#39;api/config/main-local.php&amp;#39;, ], ], ]; 根目录 **environments/**中dev/和prod/下各copy一份backend命名为blogapp即可 common/config/bootstrap.php 里添加Yii::setAlias(&#39;@blogapp&#39;, dirname(dirname(__DIR__)) . &#39;/blogapp&#39;); 有关应用blogapp文件夹里所有文件,有backend关健字全改成blogapp。才样，才能使用这个独立应用, 最重要的一步： 在服务端和本地都要进行一次初始化，即更新一下入口文件个和配置，windows使用init,linux 使用./init  Yii 验证码的使用  在site/contact下有默认的验证码可以参考
 现在给注册用户页面添加一个验证码的功能：
 Form表单(frontend/models/SignupForm):  &amp;lt;?phpclass SignupForm extends Model{public $username;public $email;public $password;public $repassword;public $verifyCode;//验证码这个变量是必须建的，因为要储存验证码的值  public function rules(){return [[&amp;#39;username&amp;#39;, &amp;#39;match&amp;#39;, &amp;#39;pattern&amp;#39; =&amp;gt; &amp;#34;/^[a-z0-9_\x{4e00}-\x{9fa5}]{2,10}$/ui&amp;#34;,&amp;#39;message&amp;#39;=&amp;gt;&amp;#39;用户名不合格&amp;#39;],[&amp;#39;username&amp;#39;, &amp;#39;required&amp;#39;],[&amp;#39;username&amp;#39;, &amp;#39;unique&amp;#39;, &amp;#39;targetClass&amp;#39; =&amp;gt; &amp;#39;\common\models\User&amp;#39;, &amp;#39;message&amp;#39; =&amp;gt; Yii::t(&amp;#39;app/user&amp;#39;,&amp;#39;This username has already been taken.&amp;#39;)],[&amp;#39;username&amp;#39;, &amp;#39;string&amp;#39;, &amp;#39;min&amp;#39; =&amp;gt; 2, &amp;#39;max&amp;#39; =&amp;gt; 255],[&amp;#39;email&amp;#39;, &amp;#39;filter&amp;#39;, &amp;#39;filter&amp;#39; =&amp;gt; &amp;#39;trim&amp;#39;],[&amp;#39;email&amp;#39;, &amp;#39;required&amp;#39;],[&amp;#39;email&amp;#39;, &amp;#39;email&amp;#39;],[&amp;#39;email&amp;#39;, &amp;#39;string&amp;#39;, &amp;#39;max&amp;#39; =&amp;gt; 255],[&amp;#39;email&amp;#39;, &amp;#39;unique&amp;#39;, &amp;#39;targetClass&amp;#39; =&amp;gt; &amp;#39;\common\models\User&amp;#39;, &amp;#39;message&amp;#39; =&amp;gt; Yii::t(&amp;#39;app/user&amp;#39;,&amp;#39;This email address has already been taken.&amp;#39;)],[[&amp;#39;password&amp;#39;], &amp;#39;required&amp;#39;],[&amp;#39;password&amp;#39;, &amp;#39;string&amp;#39;, &amp;#39;min&amp;#39; =&amp;gt; 6, &amp;#39;max&amp;#39; =&amp;gt; 16],[&amp;#39;repassword&amp;#39;, &amp;#39;required&amp;#39;],[&amp;#39;repassword&amp;#39;, &amp;#39;compare&amp;#39;, &amp;#39;compareAttribute&amp;#39;=&amp;gt;&amp;#39;password&amp;#39;, &amp;#39;message&amp;#39; =&amp;gt; &amp;#39;两次密码不一致&amp;#39;],[&amp;#39;verifyCode&amp;#39;, &amp;#39;captcha&amp;#39;, &amp;#39;captchaAction&amp;#39;=&amp;gt;&amp;#39;site/captcha&amp;#39;],//如果是自定义的验证码，那么需要在这儿进行路由添加并且要跟view里的路径一样，否则会一直验证码错误，默认为site/catpcha ];}//继续其他的}控制器（如果上面没有指定captchaAction，可以在这块位置来定义,现在定义在SiteController）  &amp;lt;?phppublic function actions(){return [&amp;#39;error&amp;#39; =&amp;gt; [&amp;#39;class&amp;#39; =&amp;gt; &amp;#39;yii\web\ErrorAction&amp;#39;,],&amp;#39;captcha&amp;#39; =&amp;gt; [&amp;#39;class&amp;#39; =&amp;gt; &amp;#39;yii\captcha\CaptchaAction&amp;#39;,&amp;#39;fixedVerifyCode&amp;#39; =&amp;gt; YII_ENV_TEST ? &amp;#39;testme&amp;#39; : null, //验证码是否为固定值，默认为空。如果是测试环境，就是固定值为testme &amp;#39;backColor&amp;#39; =&amp;gt; 0x00FF99, //背景颜色，默认白色 &amp;#39;foreColor&amp;#39; =&amp;gt; 0xFF66FF, //字体颜色，默认蓝色 &amp;#39;maxLength&amp;#39; =&amp;gt; 4, //最大字符长度，默认7 &amp;#39;minLength&amp;#39; =&amp;gt; 4, //最小字符长度，默认6 &amp;#39;height&amp;#39; =&amp;gt; 35, //高度，默认50 &amp;#39;width&amp;#39; =&amp;gt; 80, //宽度，默认120 &amp;#39;offset&amp;#39; =&amp;gt; -1, //字符之间的间隔，默认-2 &amp;#39;fontFile&amp;#39; =&amp;gt; &amp;#39;@yii/captcha/SpicyRice.ttf&amp;#39;, //字体文件 &amp;#39;imageLibrary &amp;#39; =&amp;gt; &amp;#39;gd&amp;#39;,//使用的库，默认为空，自己确定,优先使用imagick。只支持gd 和 imagick &amp;#39;padding&amp;#39; =&amp;gt; 1, //文本周围填充，默认2 &amp;#39;transparent&amp;#39; =&amp;gt; false, //是否开启透明背景，默认false &amp;#39;testLimit&amp;#39; =&amp;gt; 999, //见下 ],&amp;#39;captcha1&amp;#39; =&amp;gt; [&amp;#39;class&amp;#39; =&amp;gt; &amp;#39;yii\captcha\CaptchaAction&amp;#39;,&amp;#39;fixedVerifyCode&amp;#39; =&amp;gt; YII_ENV_TEST ? &amp;#39;testme&amp;#39; : null, //测试环境代码相同 ],];}视图页面（view/site/signup）:  &amp;lt;?phpuse yii\bootstrap\ActiveForm;use yii\captcha\Captcha;&amp;lt;?php $form = ActiveForm::begin([&amp;#39;id&amp;#39; =&amp;gt; &amp;#39;form-signup&amp;#39;,&amp;#39;enableAjaxValidation&amp;#39; =&amp;gt; true]); ?&amp;gt;&amp;lt;&amp;lt;?= $form-&amp;gt;field($model, &amp;#39;username&amp;#39;)-&amp;gt;textInput([&amp;#39;autofocus&amp;#39; =&amp;gt; true]) ?&amp;gt;&amp;lt;?= $form-&amp;gt;field($model, &amp;#39;email&amp;#39;) ?&amp;gt;&amp;lt;?= $form-&amp;gt;field($model, &amp;#39;password&amp;#39;,[&amp;#39;enableAjaxValidation&amp;#39;=&amp;gt;false])-&amp;gt;passwordInput() ?&amp;gt;&amp;lt;?= $form-&amp;gt;field($model, &amp;#39;repassword&amp;#39;,[&amp;#39;enableAjaxValidation&amp;#39;=&amp;gt;false])-&amp;gt;passwordInput() ?&amp;gt;&amp;lt;?= $form-&amp;gt;field($model, &amp;#39;verifyCode&amp;#39;,[&amp;#39;enableAjaxValidation&amp;#39;=&amp;gt;false,&amp;#39;enableClientValidation&amp;#39; =&amp;gt; true])-&amp;gt;widget(Captcha::className(), [&amp;#39;template&amp;#39; =&amp;gt; &amp;#39;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;col-lg-3&amp;#34;&amp;gt;{image}&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;col-lg-6&amp;#34;&amp;gt;{input}&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;,&amp;#39;captchaAction&amp;#39;=&amp;gt;&amp;#39;site/captcha&amp;#39;, //注意，这里要跟form里的一样，要不然会报错 &amp;#39;imageOptions&amp;#39;=&amp;gt;[&amp;#39;alt&amp;#39;=&amp;gt;&amp;#39;点击换图&amp;#39;,&amp;#39;title&amp;#39;=&amp;gt;&amp;#39;点击换图&amp;#39;, &amp;#39;style&amp;#39;=&amp;gt;&amp;#39;cursor:pointer&amp;#39;],]) ?&amp;gt;&amp;lt;?php ActiveForm::end(); ?&amp;gt;验证码总是不正确：
testLimit含义：相同验证码出现的次数。默认为3。（小于等于0的值意味着不限制）为1，或小于3，这种情况下，相同的验证码只能出现一次，而用户如果开启了ajax验证的话，填写的时候ajax验证一次已达到上限1次，提交的时候再验证一次，他会判断是否大于了testLimit的值，第二次验证testLimit会加1，显然大于了1，这时会重新生成验证码，从而出现验证码老是不正确  另一个原因：因为开启了enableAjaxValidation ，通过查看请求连接发现：虽然关闭验证码的enableAjaxValidation，但是，当点击提交的时候，还是会发送ajax请求（来验证整个输入的表单），然而，因为我们在controller 里添加了一个验证，所以验证成功之后就刷新了验证码，导致提交时候的验证就失效了大概的流程如下： ① 点击提交 ② 开启了enableAjaxValidation （不开启就不会报错）的时候会带着整个表单进行验证 ③ controller中有一句话
&amp;lt;?phpif (Yii::$app-&amp;gt;request-&amp;gt;isAjax) {Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_JSON;return ActiveForm::validate($model);//在这儿第一次验证，成功了，所以已经刷新了 }④ 这个位置因为验证成功不会报错，所以又继续进行$model-&amp;gt;signup.然而，在这个函数中，有这么一句话
&amp;lt;?phpif (!$this-&amp;gt;validate()) { //这儿进行第二次验证，因为码已经刷新，所以报错 return null;}⑤ 只需要吧最后一步的验证中的验证码验证取消即可
&amp;lt;?phpif (!$this-&amp;gt;validate([&amp;#39;username&amp;#39;,&amp;#39;password&amp;#39;,&amp;#39;email&amp;#39;,&amp;#39;repassword&amp;#39;])) {return null;}⑥ 所以验证码报错，可以取消最后一步验证，也可以直接取消enableAjaxValidation
 附上验证码的验证过程
 &amp;lt;?phpclass CaptchaAction extends Action{public function validate($input, $caseSensitive){$code = $this-&amp;gt;getVerifyCode();$valid = $caseSensitive ? ($input === $code) : strcasecmp($input, $code) === 0;$session = Yii::$app-&amp;gt;getSession();$session-&amp;gt;open();$name = $this-&amp;gt;getSessionKey() . &amp;#39;count&amp;#39;;$session[$name] = $session[$name] &#43; 1;if ($valid || $session[$name] &amp;gt; $this-&amp;gt;testLimit &amp;amp;&amp;amp; $this-&amp;gt;testLimit &amp;gt; 0) {$this-&amp;gt;getVerifyCode(true); }return $valid;}}设置参考链接1&amp;ndash;关于设置 ；刷新网页的时候自动刷新验证码,前提是开启enableClientValidation ;参考链接2&amp;ndash;关于出错的链接 当然，Form表单的enableClientVaidation默认就是开启的  composer 更改为中国镜像  修改 composer 的全局配置文件（推荐方式）
打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令： composer config -g repo.packagist composer https://packagist.phpcomposer.com 修改当前项目的 composer.json 配置文件：
进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：
composer config repo.packagist composer https://packagist.phpcomposer.com
上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：  &amp;#34;repositories&amp;#34;: {&amp;#34;packagist&amp;#34;: {&amp;#34;type&amp;#34;: &amp;#34;composer&amp;#34;,&amp;#34;url&amp;#34;: &amp;#34;https://packagist.phpcomposer.com&amp;#34;}}checkbox默认选中 假设status要显示成复选框，在controller层：
&amp;lt;?php$model-&amp;gt;status = true;return $this-&amp;gt;render(&amp;#39;create&amp;#39;, [&amp;#39;model&amp;#39; =&amp;gt; $model,]);view层：
&amp;lt;?php&amp;lt;div class=&amp;#34;col-md-1 checkbox&amp;#34;&amp;gt;&amp;lt;?=$form-&amp;gt;field($model,&amp;#39;status&amp;#39;)-&amp;gt;checkbox([&amp;#39;label&amp;#39;=&amp;gt;&amp;#39;原创&amp;#39;,&amp;#39;style&amp;#39;=&amp;gt;[&amp;#39;zoom&amp;#39;=&amp;gt;&amp;#39;150%&amp;#39;,&amp;#39;margin-top&amp;#39;=&amp;gt;0]])-&amp;gt;label(false)?&amp;gt;&amp;lt;/div&amp;gt;这样默认就会选中，在checkedbox的参数中添加&#39;checked&#39;=&amp;gt;true是无效的
控制台带选项带参数写法 &amp;lt;?phpnamespace console\controllers;use yii\console\Controller;class HelloController extends Controller{public $rev;public function options(){return [&amp;#39;rev&amp;#39;];}public function optionAliases(){return [&amp;#39;r&amp;#39;=&amp;gt;&amp;#39;rev&amp;#39;];}public function actionAll(array $name){$this-&amp;gt;rev == true ? var_dump(array_reverse($name)):var_dump($name);}}使用：yii hello/all -r q,w,e,r 或者yii hello/all --r q,w,e,r
输出结果都是翻转后的数组，区别是一个横杠表示使用选项别名，两个表示使用全称的选项。
api中三种认证方式的区别 HttpBasicAuth ： access token 作为一个用户名被传递。这种情况只适合“当access token可以安全的存储在API 接收端”的情况， 比如 调用 API 的是一个在服务器上运行的程序
QueryParamAuth：access token 在 API URL 中作为一个查询参数被传递，比如 https://example.com/users?access-token=123456789
因为多数的 Web 服务器会保存 query 参数在服务器日志中， 这个方法应该主要是用于响应无法使用 HTTP 头部信息来发送 access token 的 JSONP 请求的。
OAuth 2：遵照 OAth2.0 协议， 调用者从一个 授权服务器 上获取 access token， 再通过 HTTP Bearer Tokens 发送给 Api 服务器。
使用migration新建数据库迁移 新建：yii migrate/create &amp;lt;name&amp;gt;
执行：yii migrate/up
批量插入 是批量插入，不是多次插入
&amp;lt;?php$data = [[&amp;#39;user1&amp;#39;,&amp;#39;goods1&amp;#39;],[&amp;#39;user2&amp;#39;,&amp;#39;goods2&amp;#39;]];Yii::$app-&amp;gt;db-&amp;gt;createCommand()-&amp;gt;batchInsert(&amp;#39;{%table_name}&amp;#39;,[&amp;#39;user&amp;#39;,&amp;#39;goods&amp;#39;],$data)-&amp;gt;execute();}// {%tablen_name}是yii AR中的表名格式 (应使用两个花括号，此处使用一个是因为hugo会解析)composer全局设置 composer config -g 全局命令 设置
AR模型中的with 查询多个数据，建议使用with，比如
&amp;lt;?php// SQL executed: SELECT * FROM customer LIMIT 100$customers = Customer::find()-&amp;gt;limit(100)-&amp;gt;all();foreach ($customers as $customer) {// SQL executed: SELECT * FROM order WHERE customer_id=... $orders = $customer-&amp;gt;orders;// ...处理 $orders...}以上代码将执行101 条SQL，第一条 SQL 查询语句取回100个客户，然后， 每个客户要执行一条 SQL 查询语句以取回该客户的所有订单。如果使用了with,只需要两条sql语句:
&amp;lt;?php// SQL executed: SELECT * FROM customer LIMIT 100;// SELECT * FROM orders WHERE customer_id IN (1,2,...)$customers = Customer::find()-&amp;gt;limit(100)-&amp;gt;with(&amp;#39;orders&amp;#39;)-&amp;gt;all();foreach ($customers as $customer) {// 没有 SQL 语句被执行 $orders = $customer-&amp;gt;orders;// ...处理 $orders...}更详细的介绍：http://www.yiichina.com/doc/guide/2.0/db-active-record# 看第九条 延迟加载和及时加载
</content>
    </entry>
    
     <entry>
        <title>Php中三元运算符和合并操作符的区别</title>
        <url>https://idsze.cn/2017/08/difference-between-ternary-and-null-coalescing-operator/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>php</tag>
        </tags>
        <content type="html"> 基本的(expr1) ? (expr2) : (expr3) 就不说了。
?: 左边表达式成立就返回左边，不成立，返回右边
?? 相当于：isset(expr1) ? expr1 : expr2
 也就是说 ?? 只是说明如果左侧设置了并且不为null才返回左侧，如果左侧设置了但是为空字符串，也同样返回左侧的空字符串。
</content>
    </entry>
    
     <entry>
        <title>Yii2安装前端资源包</title>
        <url>https://idsze.cn/2017/08/install-front-end-resource-pack-in-yii2/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>yii2</tag>
        </tags>
        <content type="html"> 官方文档也有介绍：http://www.yiichina.com/doc/guide/2.0/structure-assets#bower-npm-assets
安装 iziToast  安装 iziToast.js 这个前端资源 composer require bower-asset/izitoast 或者添加composer.json然后 update：&amp;quot;bower-asset/izitoast&amp;quot;: &amp;quot;^1.1&amp;quot;，安装之后大概目录结构如下:  新建IziToastAsset.php：  &amp;lt;?phpnamespace app\assets;use yii\web\AssetBundle;class IziToastAsset extends AssetBundle{public $sourcePath = &amp;#39;@bower/izitoast/dist&amp;#39;;public $js = [&amp;#39;js/iziToast.min.js&amp;#39;// more plugin Js here ];public $css = [&amp;#39;css/iziToast.min.css&amp;#39;// more plugin CSS here ];}view层使用：\app\assets\IziToastAsset::register($this)  安装 semantic ui  bower install semantic-ui 或者 composer require bower-asset/semantic-ui（可能是npm-asset/semantic-ui） 会安装在vendor/bower目录下 创建一个assets资源，比如在 /frontend/assets 下创建一个SemanticAsset.php文件  &amp;lt;?phpnamespace frontend\assets;use yii\web\AssetBundle;class SemanticAsset extends AssetBundle{public $sourcePath = &amp;#39;@bower/semantic&amp;#39;;public $css = [&amp;#39;dist/semantic.min.css&amp;#39;];public $js = [&amp;#39;dist/semantic.min.js&amp;#39;];public $depends = [&amp;#39;yii\web\YiiAsset&amp;#39;,&amp;#39;yii\bootstap\BootstrapAsset&amp;#39;]}注册资源，main.php中使用  &amp;lt;?php// views/layouts/main.phpuse frontend\assets\SemanticAsset;SemanticAsset::register($this);</content>
    </entry>
    
     <entry>
        <title>配置easywecaht碰到的坑</title>
        <url>https://idsze.cn/2017/08/bugs-encountered-in-easywechat-development/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>easywechat</tag>
        </tags>
        <content type="html"> 版本问题  url访问微信校验：/valid?signature=xxx&amp;amp;echostr=xxx&amp;amp;timestamp=1502621836&amp;amp;nonce=xxx
  overtrue/wechat依赖 doctrine/cache ，而这个doctrine/cache最新版必须php 7.1以上，7.0.x的只能更改composer.json中这个玩意的版本， 最大1.6.2 权限问题：wechat.log 可写权限 overtrue/wechat 需要用到 curl 函数，提先安装 valid的请求方式是GET 回复消息的请求方式是 POST  配置路由rule如下：
GET wechat/valid =&amp;gt; wechat/wechat/valid // 实际路由再调POST wechat/valid =&amp;gt; wechat/wecaht/index微信支付   csrf关闭 public $enableCsrfValidation = false;
  微信支付无法在web开发工具上测试
  回调地址配置好之后，要让所有用户可以访问，要不然微信访问回调地址的时候会先 302 到登录页，然后发送 post请求，报错无法验证数据
 </content>
    </entry>
    
     <entry>
        <title>Php中几个常用的排序算法</title>
        <url>https://idsze.cn/2017/08/sorting-and-searching-algorithms-in-php/</url>
        <categories>
          <category>小知识</category>
        </categories>
        <tags>
          <tag>php</tag><tag>算法</tag>
        </tags>
        <content type="html"> &amp;lt;?php// 冒泡，从第一个开始往后比，再从第二个开始比较到倒数第二个// 循环function bubbleSort($numbers) {$count= count($numbers);if ($count &amp;lt;= 0) return false;for ($i = 0; $i &amp;lt; $count; $i&#43;&#43;) {for ($j = 0; $j &amp;lt; $count- 1 - $i; $j&#43;&#43;) {if ($numbers[$j] &amp;gt; $numbers[$j &#43; 1]) {list($numbers[$j], $numbers[$j &#43;1]) = [$numbers[$j &#43; 1], $numbers[$j]];}}}return $numbers;}$num = array(20, 40, 60, 80, 30, 70, 90, 10, 50, 0);var_dump(bubbleSort($num));&amp;lt;?php// 快速，循环小的放左边，大的放右边，然后递归function quickSort($array) {if (count($array) &amp;lt;= 1) return $array;$key = $array[0];$left_arr = array();$right_arr = array();for ($i=1; $i&amp;lt;count($array); $i&#43;&#43;){if ($array[$i] &amp;lt;= $key)$left_arr[] = $array[$i];else$right_arr[] = $array[$i];}$left_arr = quickSort($left_arr);$right_arr = quickSort($right_arr);return array_merge($left_arr, array($key), $right_arr);}&amp;lt;?php// 顺序查找，不知道有啥意义,明明可以用array_search($value, $array)或者in_array($search, $array, $type)function query_search($val){foreach ($this-&amp;gt;array as $k =&amp;gt; $v) {if($v == $val) {return $k;}}return false;}&amp;lt;?php// 二分查找function binarySearch(&amp;amp;$arr,$low,$top,$target){if($low&amp;lt;=$top){$mid = floor(($low&#43;$top)/2);if($arr[$mid]==$target){return $mid;}elseif($arr[$mid]&amp;lt;$target){return binarySearch($arr,$mid&#43;1,$top,$target);}else{return binarySearch($arr,$low,$mid-1,$target);}}else{return -1;}}$arr = array(1,3,9,23,54);echo binarySearch($arr, 0, sizeof($arr), 9);</content>
    </entry>
    
     <entry>
        <title>Mysql中int和bigint以及smallint和tinyint的区别</title>
        <url>https://idsze.cn/2017/08/difference-between-int-bigint-smallint-tinyint-in-mysql/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>mysql</tag>
        </tags>
        <content type="html">  无符号的最大值就是二进制最大位数锁代表的数值
    类型 有符号 无符号 存储大小     int -2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 0到4294967295 (2^32) 4字节(也就是32位)   bigint -2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 0到18446744073709551615 (2^64) 8字节   mediumint -2^23 (-8388608) 到 2^23-1 (8388607) 0到16777215 (2^24) 3字节   smallint -2^15 (-32,768) 到 2^15 – 1 (32,767)  0到65535 (2^16) 2字节   tinyint -128 到 127 0到255 (2^8) 1字节    int(10),括号里的这个10 所代表的含义：10是一个显示宽度，和当前int大小没有任何关系，这个10是没有任何操作的，除非int的属性选择为UNSIGNED ZEROFILL，即填充0，此时也不可能有负数，当位数(长度)不够括号里的数值的时候，会自动补0，超过没有操作。
CREATE TABLE zerofill_demo（id INT（11）NOT NULL AUTO_INCREMENT，a INT（11）NOT NULL，b INT（11）UNSIGNED ZEROFILL NOT NULL，c INT（5）DEFAULT NULL，d INT（5）UNSIGNED ZEROFILL NOT NULL，e INT（15）DEFAULT NULL，PRIMARY KEY（`id`））# 插入数据INSERT INTO zerofill_demo（a，b，c，d，e）VALUES（1,1,1,1,1）;INSERT INTO zerofill_demo（a，b，c，d，e）VALUES（1234567890，1234567890，1234567890，1234567890，1234567890）;# 最终结果&#43; ---- &#43; ------------ &#43; ------------- &#43; ------------ &#43; ---- -------- &#43; ------------ &#43;| id | a | b | c | d | e |&#43; ---- &#43; ------------ &#43; ------------- &#43; ------------ &#43; ---- -------- &#43; ------------ &#43;| 1 | 1 | 00000000001 | 1 | 00001 | 1 || 2 | 1234567890 | 01234567890 | 1234567890 | 1234567890 | 1234567890 |&#43; ---- &#43; ------------ &#43; ------------- &#43; ------------ &#43; ---- -------- &#43; ------------ &#43;</content>
    </entry>
    
     <entry>
        <title>serialize和json_encode效率比较</title>
        <url>https://idsze.cn/2017/07/comparison-of-serialize-and-json_encode-efficiency/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>php</tag>
        </tags>
        <content type="html"> 将数组转为字符串，serialize比json_encode效率高很多。
PHP 7.1.5下测试：
&amp;lt;?php// 数据较多的情况下$target = array(&amp;#39;battle_id&amp;#39; =&amp;gt; 257,&amp;#39;user_id&amp;#39; =&amp;gt; 41248,&amp;#39;user_id2&amp;#39; =&amp;gt; 23989,&amp;#39;player&amp;#39; =&amp;gt; 41248,&amp;#39;formation&amp;#39; =&amp;gt; array(&amp;#39;41248&amp;#39; =&amp;gt; 1, &amp;#39;23989&amp;#39; =&amp;gt; 2),&amp;#39;result&amp;#39; =&amp;gt; 1,&amp;#39;battle_type&amp;#39; =&amp;gt; 1,&amp;#39;speed&amp;#39; =&amp;gt; array(&amp;#39;41248&amp;#39; =&amp;gt; 0, &amp;#39;23989&amp;#39; =&amp;gt; 0),&amp;#39;attacker&amp;#39; =&amp;gt; array(&amp;#39;1&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248,&amp;#39;soldier_id&amp;#39; =&amp;gt; 28, &amp;#39;prototype_id&amp;#39; =&amp;gt; 4, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3997, &amp;#39;hp&amp;#39; =&amp;gt; 3997, &amp;#39;attack_general&amp;#39; =&amp;gt; 346, &amp;#39;attack_skill&amp;#39; =&amp;gt; 596, &amp;#39;attack_explode&amp;#39; =&amp;gt; 458, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 2, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;4&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;soldier_id&amp;#39; =&amp;gt; 29, &amp;#39;prototype_id&amp;#39; =&amp;gt; 2, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3555, &amp;#39;hp&amp;#39; =&amp;gt; 3555, &amp;#39;attack_general&amp;#39; =&amp;gt; 396, &amp;#39;attack_skill&amp;#39; =&amp;gt; 581, &amp;#39;attack_explode&amp;#39; =&amp;gt; 418, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;5&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;soldier_id&amp;#39; =&amp;gt; 30, &amp;#39;prototype_id&amp;#39; =&amp;gt; 6, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3043, &amp;#39;hp&amp;#39; =&amp;gt; 3043, &amp;#39;attack_general&amp;#39; =&amp;gt; 351, &amp;#39;attack_skill&amp;#39; =&amp;gt; 540, &amp;#39;attack_explode&amp;#39; =&amp;gt; 474, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;7&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;soldier_id&amp;#39; =&amp;gt; 37, &amp;#39;prototype_id&amp;#39; =&amp;gt; 2, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3491, &amp;#39;hp&amp;#39; =&amp;gt; 3491, &amp;#39;attack_general&amp;#39; =&amp;gt; 393, &amp;#39;attack_skill&amp;#39; =&amp;gt; 532, &amp;#39;attack_explode&amp;#39; =&amp;gt; 456, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0)), &amp;#39;defender&amp;#39; =&amp;gt; array(&amp;#39;2&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 23989, &amp;#39;soldier_id&amp;#39; =&amp;gt; 24, &amp;#39;prototype_id&amp;#39; =&amp;gt; 1, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3230, &amp;#39;hp&amp;#39; =&amp;gt; 3230, &amp;#39;attack_general&amp;#39; =&amp;gt; 390, &amp;#39;attack_skill&amp;#39; =&amp;gt; 567, &amp;#39;attack_explode&amp;#39; =&amp;gt; 442, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;5&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 23989, &amp;#39;soldier_id&amp;#39; =&amp;gt; 25, &amp;#39;prototype_id&amp;#39; =&amp;gt; 2, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3400, &amp;#39;hp&amp;#39; =&amp;gt; 3400, &amp;#39;attack_general&amp;#39; =&amp;gt; 379, &amp;#39;attack_skill&amp;#39; =&amp;gt; 536, &amp;#39;attack_explode&amp;#39; =&amp;gt; 405, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;7&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 23989, &amp;#39;soldier_id&amp;#39; =&amp;gt; 26, &amp;#39;prototype_id&amp;#39; =&amp;gt; 6, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3669, &amp;#39;hp&amp;#39; =&amp;gt; 3669, &amp;#39;attack_general&amp;#39; =&amp;gt; 362, &amp;#39;attack_skill&amp;#39; =&amp;gt; 549, &amp;#39;attack_explode&amp;#39; =&amp;gt; 426, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0), &amp;#39;9&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 23989, &amp;#39;soldier_id&amp;#39; =&amp;gt; 27, &amp;#39;prototype_id&amp;#39; =&amp;gt; 1, &amp;#39;bid&amp;#39; =&amp;gt; 1, &amp;#39;level&amp;#39; =&amp;gt; 1, &amp;#39;rare&amp;#39; =&amp;gt; 1, &amp;#39;skill_id&amp;#39; =&amp;gt; 1, &amp;#39;totalhp&amp;#39; =&amp;gt; 3618, &amp;#39;hp&amp;#39; =&amp;gt; 3618, &amp;#39;attack_general&amp;#39; =&amp;gt; 326, &amp;#39;attack_skill&amp;#39; =&amp;gt; 510, &amp;#39;attack_explode&amp;#39; =&amp;gt; 419, &amp;#39;attack_type&amp;#39; =&amp;gt; 1, &amp;#39;defense&amp;#39; =&amp;gt; 0, &amp;#39;anger&amp;#39; =&amp;gt; 50, &amp;#39;dodge&amp;#39; =&amp;gt; 2, &amp;#39;crit&amp;#39; =&amp;gt; 2, &amp;#39;block&amp;#39; =&amp;gt; 0, &amp;#39;block_effect&amp;#39; =&amp;gt; 0.5, &amp;#39;crit_effect&amp;#39; =&amp;gt; 2, &amp;#39;foramtion_effect&amp;#39; =&amp;gt; 0)), &amp;#39;battle_process&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;1&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;2&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;3&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;4&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;5&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;6&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;7&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;8&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;9&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;10&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;11&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;12&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;13&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;14&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;15&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;16&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;17&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;18&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;19&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0), &amp;#39;20&amp;#39; =&amp;gt; array(&amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;asid&amp;#39; =&amp;gt; 28, &amp;#39;bsid&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 26), &amp;#39;harm&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 1650), &amp;#39;dhp&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 2019), &amp;#39;attacker_anger&amp;#39; =&amp;gt; 66, &amp;#39;defender_anger&amp;#39; =&amp;gt; array(&amp;#39;0&amp;#39; =&amp;gt; 94), &amp;#39;skill&amp;#39; =&amp;gt; 0, &amp;#39;state&amp;#39; =&amp;gt; 0)));$json = json_encode($target);$seri = serialize($target);echo &amp;#34;json :&amp;#34;, strlen($json), PHP_EOL;echo &amp;#34;serialize :&amp;#34;, strlen($seri), PHP_EOL;$stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {json_encode($target);}$etime = microtime(true);echo &amp;#34;json_encode :&amp;#34;, ($etime - $stime), PHP_EOL;// --------------------------------------------$stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {json_decode($json, true);}$etime = microtime(true);echo &amp;#34;json_decode :&amp;#34;, ($etime - $stime), PHP_EOL;//----------------------------------$stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {serialize($target);}$etime = microtime(true);echo &amp;#34;serialize :&amp;#34;, ($etime - $stime), PHP_EOL;//----------------------------------$stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {unserialize($seri);}$etime = microtime(true);echo &amp;#34;unserialize :&amp;#34;, ($etime - $stime), PHP_EOL;测试结果：
json :5350serialize :8590json_encode :0.33600091934204json_decode :1.3156130313873serialize :0.26520109176636unserialize :0.49200201034546继续测试小数据
&amp;lt;?php// 少量数据的情况$target = array(&amp;#39;battle_id&amp;#39; =&amp;gt; 257, &amp;#39;user_id&amp;#39; =&amp;gt; 41248, &amp;#39;user_id2&amp;#39; =&amp;gt; 23989, &amp;#39;player&amp;#39; =&amp;gt; 41248, &amp;#39;formation&amp;#39; =&amp;gt; array(&amp;#39;41248&amp;#39; =&amp;gt; 1, &amp;#39;23989&amp;#39; =&amp;gt; 2), &amp;#39;result&amp;#39; =&amp;gt; 1, &amp;#39;battle_type&amp;#39; =&amp;gt; 1, &amp;#39;speed&amp;#39; =&amp;gt; array(&amp;#39;41248&amp;#39; =&amp;gt; 0, &amp;#39;23989&amp;#39; =&amp;gt; 0));$json = json_encode($target);$seri = serialize($target);echo &amp;#34;json :&amp;#34;, strlen($json), PHP_EOL;echo &amp;#34;serialize :&amp;#34;, strlen($seri), PHP_EOL;$stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {json_encode($target);}$etime = microtime(true);echo &amp;#34;json_encode :&amp;#34;, ($etime - $stime), PHP_EOL;//---------------------------------- $stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {json_decode($json, true);}$etime = microtime(true);echo &amp;#34;json_decode :&amp;#34;, ($etime - $stime), PHP_EOL;//---------------------------------- $stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {serialize($target);}$etime = microtime(true);echo &amp;#34;serialize :&amp;#34;, ($etime - $stime), PHP_EOL;//---------------------------------- $stime = microtime(true);for ($i = 0; $i &amp;lt; 10000; $i&#43;&#43;) {unserialize($seri);}$etime = microtime(true);echo &amp;#34;unserialize :&amp;#34;, ($etime - $stime), PHP_EOL;测试结果：
json :156serialize :222json_encode :0json_decode :0.046799898147583serialize :0unserialize :0.015599966049194</content>
    </entry>
    
     <entry>
        <title>Yii2中更改editormd的图片上传路径</title>
        <url>https://idsze.cn/2017/07/change-editormd-image-upload-path-in-yii2/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>yii2</tag>
        </tags>
        <content type="html"> 文件路径：vendor/bower/editor.md/plugins/image-dialog/image-dialog.js
更改图片上传到 https://sm.ms
/*!* Image (upload) dialog plugin for Editor.md* 2017/7/11 做过一些更改，上传到http://sm.ms** @file image-dialog.js* @author pandao* @version 1.3.4* @updateTime 2015-06-09* {@link https://github.com/pandao/editor.md}* @license MIT*/(function() {var factory = function (exports) {var pluginName = &amp;#34;image-dialog&amp;#34;;exports.fn.imageDialog = function() {var _this = this;var cm = this.cm;var lang = this.lang;var editor = this.editor;var settings = this.settings;var cursor = cm.getCursor();var selection = cm.getSelection();var imageLang = lang.dialog.image;var classPrefix = this.classPrefix;var iframeName = classPrefix &#43; &amp;#34;image-iframe&amp;#34;;var dialogName = classPrefix &#43; pluginName, dialog;cm.focus();var loading = function(show) {var _loading = dialog.find(&amp;#34;.&amp;#34; &#43; classPrefix &#43; &amp;#34;dialog-mask&amp;#34;);_loading[(show) ? &amp;#34;show&amp;#34; : &amp;#34;hide&amp;#34;]();};if (editor.find(&amp;#34;.&amp;#34; &#43; dialogName).length &amp;lt; 1){var guid = (new Date).getTime();var action = settings.imageUploadURL &#43; (settings.imageUploadURL.indexOf(&amp;#34;?&amp;#34;) &amp;gt;= 0 ? &amp;#34;&amp;amp;&amp;#34; : &amp;#34;?&amp;#34;) &#43; &amp;#34;guid=&amp;#34; &#43; guid;if (settings.crossDomainUpload){action &#43;= &amp;#34;&amp;amp;callback=&amp;#34; &#43; settings.uploadCallbackURL &#43; &amp;#34;&amp;amp;dialog_id=editormd-image-dialog-&amp;#34; &#43; guid;}var dialogContent = ( (settings.imageUpload) ? &amp;#34;&amp;lt;form action=\&amp;#34;&amp;#34; &#43; action &#43;&amp;#34;\&amp;#34; target=\&amp;#34;&amp;#34; &#43; iframeName &#43; &amp;#34;\&amp;#34; method=\&amp;#34;post\&amp;#34; enctype=\&amp;#34;multipart/form-data\&amp;#34; class=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;form\&amp;#34;&amp;gt;&amp;#34; : &amp;#34;&amp;lt;div class=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;form\&amp;#34;&amp;gt;&amp;#34; ) &#43;( (settings.imageUpload) ? &amp;#34;&amp;lt;iframe name=\&amp;#34;&amp;#34; &#43; iframeName &#43; &amp;#34;\&amp;#34; id=\&amp;#34;&amp;#34; &#43; iframeName &#43; &amp;#34;\&amp;#34; guid=\&amp;#34;&amp;#34; &#43; guid &#43; &amp;#34;\&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#34; : &amp;#34;&amp;#34; ) &#43;&amp;#34;&amp;lt;label&amp;gt;&amp;#34; &#43; imageLang.url &#43; &amp;#34;&amp;lt;/label&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;input type=\&amp;#34;text\&amp;#34; data-url /&amp;gt;&amp;#34; &#43; (function(){return (settings.imageUpload) ? &amp;#34;&amp;lt;div class=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;file-input\&amp;#34;&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;input type=\&amp;#34;file\&amp;#34; name=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;image-file\&amp;#34; accept=\&amp;#34;image/gif,image/jpeg,image/jpg,image/png\&amp;#34; /&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;input type=\&amp;#34;submit\&amp;#34; value=\&amp;#34;本地上传\&amp;#34;&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;/div&amp;gt;&amp;#34; : &amp;#34;&amp;#34;;})() &#43;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;label&amp;gt;&amp;#34; &#43; imageLang.alt &#43; &amp;#34;&amp;lt;/label&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;input type=\&amp;#34;text\&amp;#34; value=\&amp;#34;&amp;#34; &#43; selection &#43; &amp;#34;\&amp;#34; data-alt /&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;label&amp;gt;&amp;#34; &#43; imageLang.link &#43; &amp;#34;&amp;lt;/label&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;input type=\&amp;#34;text\&amp;#34; value=\&amp;#34;http://\&amp;#34; data-link /&amp;gt;&amp;#34; &#43;&amp;#34;&amp;lt;br/&amp;gt;&amp;#34; &#43;( (settings.imageUpload) ? &amp;#34;&amp;lt;/form&amp;gt;&amp;#34; : &amp;#34;&amp;lt;/div&amp;gt;&amp;#34;);//var imageFooterHTML = &amp;#34;&amp;lt;button class=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;btn &amp;#34; &#43; classPrefix &#43; &amp;#34;image-manager-btn\&amp;#34; style=\&amp;#34;float:left;\&amp;#34;&amp;gt;&amp;#34; &#43; imageLang.managerButton &#43; &amp;#34;&amp;lt;/button&amp;gt;&amp;#34;;dialog = this.createDialog({title : imageLang.title,width : (settings.imageUpload) ? 465 : 380,height : 254,name : dialogName,content : dialogContent,mask : settings.dialogShowMask,drag : settings.dialogDraggable,lockScreen : settings.dialogLockScreen,maskStyle : {opacity : settings.dialogMaskOpacity,backgroundColor : settings.dialogMaskBgColor},buttons : {enter : [lang.buttons.enter, function() {var url = this.find(&amp;#34;[data-url]&amp;#34;).val();var alt = this.find(&amp;#34;[data-alt]&amp;#34;).val();var link = this.find(&amp;#34;[data-link]&amp;#34;).val();if (url === &amp;#34;&amp;#34;){alert(imageLang.imageURLEmpty);return false;}var altAttr = (alt !== &amp;#34;&amp;#34;) ? &amp;#34; \&amp;#34;&amp;#34; &#43; alt &#43; &amp;#34;\&amp;#34;&amp;#34; : &amp;#34;&amp;#34;;if (link === &amp;#34;&amp;#34; || link === &amp;#34;http://&amp;#34;){cm.replaceSelection(&amp;#34;![&amp;#34; &#43; alt &#43; &amp;#34;](&amp;#34; &#43; url &#43; altAttr &#43; &amp;#34;)&amp;#34;);}else{cm.replaceSelection(&amp;#34;[![&amp;#34; &#43; alt &#43; &amp;#34;](&amp;#34; &#43; url &#43; altAttr &#43; &amp;#34;)](&amp;#34; &#43; link &#43; altAttr &#43; &amp;#34;)&amp;#34;);}if (alt === &amp;#34;&amp;#34;) {cm.setCursor(cursor.line, cursor.ch &#43; 2);}this.hide().lockScreen(false).hideMask();return false;}],cancel : [lang.buttons.cancel, function() {this.hide().lockScreen(false).hideMask();return false;}]}});dialog.attr(&amp;#34;id&amp;#34;, classPrefix &#43; &amp;#34;image-dialog-&amp;#34; &#43; guid);if (!settings.imageUpload) {return ;}var fileInput = dialog.find(&amp;#34;[name=\&amp;#34;&amp;#34; &#43; classPrefix &#43; &amp;#34;image-file\&amp;#34;]&amp;#34;);// 上传到https://sm.ms var sm_upload = function(file, length, i){if (length &amp;gt; i) {var xhr = new XMLHttpRequest();var formData = new FormData();formData.append(&amp;#39;smfile&amp;#39;,file[0]);xhr.open(&amp;#39;POST&amp;#39;, &amp;#39;https://sm.ms/api/upload&amp;#39;, true);xhr.onreadystatechange = function() {if (xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status === 200 &amp;amp;&amp;amp; xhr.responseText !== &amp;#34;&amp;#34;) {var data = JSON.parse(xhr.responseText);if (data.code === &amp;#34;success&amp;#34;){dialog.find(&amp;#34;[data-url]&amp;#34;).val(data.data.url);dialog.find(&amp;#34;[data-alt]&amp;#34;).val(data.data.filename);console.log(data.url,data.data.delete);sm_clear();}else{console.log(data.msg)}loading(false)}};xhr.send(formData);}else{fileInput.val(&amp;#39;&amp;#39;);loading(false)}};// 清除历史，防止被删 var sm_clear = function(){var get_xhr = new XMLHttpRequest();get_xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;https://sm.ms/api/clear&amp;#39;, true);get_xhr.onreadystatechange = function() {if (get_xhr.readyState === 4 &amp;amp;&amp;amp; get_xhr.status === 200){console.log(get_xhr.responseText)}};get_xhr.send();};var submitHandler = function() {var files = fileInput[0].files;if (files.length &amp;gt; 0) {sm_upload(files, files.length, 0)}return false;};fileInput.bind(&amp;#34;change&amp;#34;, function() {var fileName = fileInput.val();var isImage = new RegExp(&amp;#34;(\\.(&amp;#34; &#43; settings.imageFormats.join(&amp;#34;|&amp;#34;) &#43; &amp;#34;))$&amp;#34;); // /(\.(webp|jpg|jpeg|gif|bmp|png))$/if (fileName === &amp;#34;&amp;#34;){alert(imageLang.uploadFileEmpty);return false;}if (!isImage.test(fileName)){alert(imageLang.formatNotAllowed &#43; settings.imageFormats.join(&amp;#34;, &amp;#34;));return false;}loading(true);dialog.find(&amp;#34;[type=\&amp;#34;submit\&amp;#34;]&amp;#34;).bind(&amp;#34;click&amp;#34;, submitHandler).trigger(&amp;#34;click&amp;#34;);});}dialog = editor.find(&amp;#34;.&amp;#34; &#43; dialogName);dialog.find(&amp;#34;[type=\&amp;#34;text\&amp;#34;]&amp;#34;).val(&amp;#34;&amp;#34;);dialog.find(&amp;#34;[type=\&amp;#34;file\&amp;#34;]&amp;#34;).val(&amp;#34;&amp;#34;);dialog.find(&amp;#34;[data-link]&amp;#34;).val(&amp;#34;http://&amp;#34;);this.dialogShowMask(dialog);this.dialogLockScreen();dialog.show();};};// CommonJS/Node.js if (typeof require === &amp;#34;function&amp;#34; &amp;amp;&amp;amp; typeof exports === &amp;#34;object&amp;#34; &amp;amp;&amp;amp; typeof module === &amp;#34;object&amp;#34;){module.exports = factory;}else if (typeof define === &amp;#34;function&amp;#34;) // AMD/CMD/Sea.js {if (define.amd) { // for Require.jsdefine([&amp;#34;editormd&amp;#34;], function(editormd) {factory(editormd);});} else { // for Sea.js define(function(require) {var editormd = require(&amp;#34;./../../editormd&amp;#34;);factory(editormd);});}}else{factory(window.editormd);}})();</content>
    </entry>
    
     <entry>
        <title>Html中的input File在Chrome中弹出缓慢</title>
        <url>https://idsze.cn/2017/07/html-input-file-pops-very-slowly-in-chrome/</url>
        <categories>
          <category>小知识</category>
        </categories>
        <tags>
          <tag>html</tag>
        </tags>
        <content type="html"> &amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;image/*&amp;quot;&amp;gt; 改为如下:
&amp;lt;input type=&amp;quot;file&amp;quot; accept=&amp;quot;image/gif,image/jpeg,image/jpg,image/png&amp;quot;&amp;gt;
accept=&amp;quot;image/*&amp;quot;属性会对每一个文件都遍历一次所有的&amp;quot;image/*&amp;quot;文件类型，当文件较多时，文件的检验时间较长。
如果是accept=&amp;quot;audio/*&amp;quot;和accept=&amp;quot;video/*&amp;quot;，同样指明所需文件的类型MIME类型
获取 input 中的 file 可以使用 var selectedFile = $(&#39;#input&#39;).get(0).files[0];
</content>
    </entry>
    
     <entry>
        <title>Yii2中引用vendor中的js和css</title>
        <url>https://idsze.cn/2017/06/use-js-and-css-in-vendor-floder/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>yii2</tag>
        </tags>
        <content type="html"> 以AdminLte为例，register.html在使用的时候无法显示单选框，查看元素发现少了iCkeck.js文件
直接使用Yii2的资源管理包： assets目录下新建一个Asset文件（AdminLtePluginAsset.php）：
&amp;lt;?phpnamespace app\assets;use yii\web\AssetBundle;class AdminLtePluginAsset extends AssetBundle{public $sourcePath = &amp;#39;@vendor/almasaeed2010/adminlte/plugins&amp;#39;;public $js = [&amp;#39;iCheck/icheck.min.js&amp;#39;// more plugin Js here ];public $css = [&amp;#39;iCheck/all.css&amp;#39;// more plugin CSS here ];public $depends = [// 注明依赖关系 &amp;#39;dmstr\web\AdminLteAsset&amp;#39;,];}使用： 更改main.php 或者 main-login.php(主要看在那个页面使用)
&amp;lt;?phpif (Yii::$app-&amp;gt;controller-&amp;gt;action-&amp;gt;id === &amp;#39;signup&amp;#39;) {// AdminLtePluginAsset是依赖于AdminLteAsset的，所以可以取消AdminLteAsset的注册 app\assets\AdminLtePluginAsset::register($this);}else{dmstr\web\AdminLteAsset::register($this);}现在就可以完美使用了，其他的js文件类似处理
</content>
    </entry>
    
     <entry>
        <title>Composer Install和composer Update的区别</title>
        <url>https://idsze.cn/2017/06/the-difference-between-composer-install-and-composer-update/</url>
        <categories>
          <category>瞎折腾</category>
        </categories>
        <tags>
          <tag>composer</tag>
        </tags>
        <content type="html"> composer install 和 composer update 区别：
install 的时候如果发现 composer.lock 中存在锁定版本，就会安装该版本。不存在的话会安装.json里的版本并创建 .lock 文件,update 是更新所有依赖的版本并更新 composer.lock 文件。
</content>
    </entry>
    
     <entry>
        <title>Js学习笔记</title>
        <url>https://idsze.cn/2017/06/javascript-study-notes/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>js</tag>
        </tags>
        <content type="html">  语句还是要以分号结尾，规范一些 变量名是大小写英文、数字、$和_的组合，且不能用数字开头 变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错 建议使用严格模式 use strict 也是弱类型语言 （比较的时候类型自动转换） 严格区分大小写   数据类型：  number（包括了整数和浮点） string boolean null和undefined Array Object （var person = {name: &#39;Bob&#39;, age: 20, zipcode: null};） Map和Set（ES6新增的数据类型）   一切皆对象，函数也是对象  数组对象 字符串对象 Math对象 Number对象 RegExp对象   ES6新增反引号表示多行字符串，字符串模板连接变量  ES6新增的iterable类型包括Array,Map,Set. 抽象是数学中非常常见的概念。举个例子：计算数列的和，比如：1 &#43; 2 &#43; 3 &#43; &amp;hellip; &#43; 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 &#43; 2 &#43; 3 &#43; &amp;hellip; &#43; 100记作： 可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。 写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。 JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性var course = &#39;Learn JavaScript&#39;;alert(window.course) </content>
    </entry>
    
     <entry>
        <title>Js中的数组函数和php中数组函数的对比</title>
        <url>https://idsze.cn/2017/06/comparison-of-array-functions-in-php-and-js/</url>
        <categories>
          <category>笔记</category>
        </categories>
        <tags>
          <tag>js</tag><tag>php</tag>
        </tags>
        <content type="html"> // js var arr=[1,2,&amp;#39;hello&amp;#39;,&amp;#39;world&amp;#39;]; // php $arr = [1,2,&amp;#39;hello&amp;#39;,&amp;#39;world&amp;#39;];    JavaScript PHP 含义 返回值 用法 备注     length count()或者sizeof() 数组长度 - arr.length; count($arr); sizeof()是count()的别名   indexOf() array_search() 指定元素的索引 成功返回第一个键名(或索引)，失败分别返回-1 和 false arr.indexOf(1); array_search(1,$arr); 返回值   slice() array_slice() 数组截取 返回截取的部分 arr.slice(0,2); array_slice($arr,0,2); 前者两个参数都是索引(不包括结束索引)，后者第三个参数表示长度   push() array_push() 从尾部压入(入栈) 返回新数组长度(改变原数组) arr.push(&#39;A&#39;) array_push($arr,&#39;A&#39;) -   pop() array_pop() 弹出数组最后一个(出栈) 返回弹出的值(改变原数组) arr.pop() array_pop($arr) -   unshift() array_unshift() 从头压入数据 返回新数组长度(改变原数组) arr.unshift() array_unshift($arr,&#39;A&#39;) -   shift() array_shift() 弹出数组第一个元素 返回弹出的值(改变原数组) arr.shift() array_shift($arr) -   sort() sort() 排序 后者返回值为bool arr.sort() sort($arr) -   reverse() array_reverse() 数组反转 前者改变原数组，后者返回翻转后数组 arr.reverse() array_reverse($arr) -   splice() array_splice() 替换指定部分为指定的值 返回被删除的元素(改变原数组) arr.splice(1,2,&#39;A&#39;,&#39;B&#39;) array_splice($arr,1,2,[&#39;A&#39;,&#39;B&#39;]) 写法不太一样，后者要替换的是写个数组，前者分开写元素   concat() array_merge() 数组合并 返回合并后的数组 arr.concat([1,2,3]) array_merge($arr,[1,2,3]) 存在相同字符串键名，后者覆盖前者   join() implode() 数组转字符串 字符串 arr.join(&#39;-&#39;) implode(&#39;-&#39;,$arr)      在js中貌似没有关联数组一说，对象就是关联数组（但其实，array本身也是对象）。js对象中 键值对的声明为 : ，跟php中的=&amp;gt;不一，并且键的名称（其实就是对象的属性）也不需要用引号来包含，除非这个键包含了特殊符号，比如（var xiaohong = {name: &#39;小红&#39;,&#39;middle-school&#39;: &#39;No.1 Middle School&#39;};），包含特殊符号的属性，也只能用关联数组的形式来访问，比如xiaohog[&#39;middle-school&#39;]
 1. 一开始以为有关联数组，所以这种写法是错的 var a[&amp;#39;name&amp;#39;] = &amp;#39;aaa&amp;#39;; var a[&amp;#39;age&amp;#39;] = 12; console.log(a[&amp;#39;name&amp;#39;]); // 报错：Uncaught SyntaxError: Unexpected token [ 2. 先定义数组，再添加元素 var a=[]; a[&amp;#39;name&amp;#39;] = &amp;#39;sdf&amp;#39; a[&amp;#39;age&amp;#39;] =12 console.log(a[&amp;#39;name&amp;#39;],a[&amp;#39;age&amp;#39;],typeof(a),a.length) // sdf 12 object 0 // 长度依旧为0 </content>
    </entry>
    
</search>